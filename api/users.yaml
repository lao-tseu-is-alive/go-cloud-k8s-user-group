---
openapi: 3.0.3
info:
  title: User microservice written in Golang
  description: OpenApi Specification for an API to manage User and Group
  contact:
    name: go-cloud-k8s-user-group API Team
    url: https://goeland.io
    email: go-cloud-k8s-user-group@goeland.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.4
servers:
- url: https://api.goeland.io/users
paths:
  /users:
    get:
      summary: UserList returns a list of users
      description: Returns the users in an array
      operationId: UserList
      parameters:
      - name: limit
        in: query
        description: maximum number of results to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: get List of users response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserList'
        "401":
          description: Access token is missing or invalid
        default:
          description: unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
    post:
      summary: UserCreate will create a new user
      description: Creates a new user
      operationId: UserCreate
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: User creation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Access token is missing or invalid
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
  /users/{userId}:
    get:
      summary: UserGet will retrieve in backend all information about a specific userId
      description: Retrieve a specific user
      operationId: UserGet
      parameters:
      - name: userId
        in: path
        description: Id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: get user successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Access token is missing or invalid
        "404":
          description: get users response when userId was not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
    put:
      summary: UserUpdate allows to modify information about a specific userId
      description: Updates the status of a user
      operationId: UserUpdate
      parameters:
      - name: userId
        in: path
        description: Id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      requestBody:
        description: informations related to the user
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: put users successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Access token is missing or invalid
        "404":
          description: put users response when userId was not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
    delete:
      summary: UserDelete allows to delete a specific userId
      description: delete a user
      operationId: UserDelete
      parameters:
      - name: userId
        in: path
        description: Id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: delete user successful no content
        "401":
          description: Access token is missing or invalid
        "404":
          description: delete user response when userId was not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
  /users/{userId}/changepassword:
    put:
      summary: UserChangePassword allows a user to change it's own password
      description: allows a logged in user with a valid JWT to reset is own user password
      operationId: UserChangePassword
      parameters:
      - name: userId
        in: path
        description: Id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      requestBody:
        description: new password hash for this username (it should match with userId and the JWT userId)
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        "200":
          description: reset user password successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Access token is missing or invalid
        "404":
          description: put user response when userId was not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
  /groups:
    get:
      summary: GroupList returns a list of groups
      description: Returns the groups in an array
      operationId: GroupList
      parameters:
      - name: limit
        in: query
        description: maximum number of results to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: get List of groups response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupList'
        "401":
          description: Access token is missing or invalid
        default:
          description: unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
    post:
      summary: GroupCreate will create a new group
      description: Creates a new group
      operationId: GroupCreate
      requestBody:
        description: Group to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "201":
          description: Group creation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        "401":
          description: Access token is missing or invalid
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
  /groups/{groupId}:
    get:
      summary: GroupGet will retrieve in backend all information about a specific groupId
      description: Retrieve a specific group
      operationId: GroupGet
      parameters:
      - name: groupId
        in: path
        description: Id of the group
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: get group successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        "401":
          description: Access token is missing or invalid
        "404":
          description: get group response when groupId was not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
    put:
      summary: GroupUpdate allows to modify information about a specific groupId
      description: Updates the informations related to a group
      operationId: GroupUpdate
      parameters:
      - name: groupId
        in: path
        description: Id of the group
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      requestBody:
        description: informations related to the group
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        "200":
          description: put group successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        "401":
          description: Access token is missing or invalid
        "404":
          description: put group response when userId was not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
    delete:
      summary: GroupDelete allows to delete a specific groupId
      description: delete a group
      operationId: GroupDelete
      parameters:
      - name: groupId
        in: path
        description: Id of the group
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: delete group successful no content
        "401":
          description: Access token is missing or invalid
        "404":
          description: delete group response when groupId was not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
components:
  schemas:
    User:
      required:
      - bad_password_count
      - create_time
      - creator
      - email
      - id
      - is_active
      - is_admin
      - is_locked
      - name
      - password_hash
      - username
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          minLength: 2
          type: string
        email:
          minLength: 3
          type: string
          format: email
        username:
          minLength: 2
          type: string
        password_hash:
          minLength: 32
          type: string
        external_id:
          type: integer
          format: int32
        orgunit_id:
          type: integer
          format: int32
        groups_id:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
        phone:
          type: string
        is_locked:
          type: boolean
          default: false
        is_admin:
          type: boolean
          default: false
        create_time:
          type: string
          format: date-time
        creator:
          type: integer
          format: int32
        last_modification_time:
          type: string
          format: date-time
        last_modification_user:
          type: integer
          format: int32
        is_active:
          type: boolean
          default: true
        inactivation_time:
          type: string
          format: date-time
        inactivation_reason:
          type: string
        comment:
          type: string
        bad_password_count:
          type: integer
          format: int32
          default: 0
    UserLogin:
      required:
      - password_hash
      - username
      type: object
      properties:
        username:
          minLength: 2
          type: string
        password_hash:
          minLength: 32
          type: string
    UserList:
      required:
      - create_time
      - creator
      - email
      - id
      - is_active
      - is_admin
      - is_locked
      - name
      - username
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          minLength: 2
          type: string
        email:
          minLength: 3
          type: string
          format: email
        username:
          minLength: 2
          type: string
        is_locked:
          type: boolean
        is_admin:
          type: boolean
        is_active:
          type: boolean
        creator:
          type: integer
          format: int32
        create_time:
          type: string
          format: date-time
    Group:
      required:
      - create_time
      - creator
      - id
      - is_active
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          minLength: 2
          type: string
        create_time:
          type: string
          format: date-time
        creator:
          type: integer
          format: int32
        last_modification_time:
          type: string
          format: date-time
        last_modification_user:
          type: integer
          format: int32
        is_active:
          type: boolean
          default: true
        inactivation_time:
          type: string
          format: date-time
        inactivation_reason:
          type: string
        comment:
          type: string
    GroupList:
      required:
      - id
      - is_active
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          minLength: 2
          type: string
        is_active:
          type: boolean
          default: true
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    JsonWebToken:
      required:
      - token
      type: object
      properties:
        token:
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
