---
### TEMPLATE FOR A SERVICE AND DEPLOYMENT ON KUBERNETES just substitute the next keywords with your own values
### APP_NAME     : the name of your application or container image
### APP_VERSION  : the version of the app image to deploy
### GO_CONTAINER_REGISTRY_PREFIX  : the prefix to your images in your container registry
apiVersion: v1
kind: Namespace
metadata:
  name: test-APP_NAME
  labels:
    env: test
    app: APP_NAME
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-resources
  namespace: test-APP_NAME
spec:
  hard:
    requests.cpu: 2000m
    requests.memory: 1Gi
    limits.cpu: 4000m
    limits.memory: 4Gi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  namespace: test-APP_NAME
  name: pod-reader-role
  labels:
    app: APP_NAME
rules:
  - apiGroups: [""]  # "" indicates the core API group
    resources: ["pods", "namespaces"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pod-reader-role-binding
  labels:
    app: APP_NAME
subjects:
  - kind: Group
    name: system:serviceaccounts
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: pod-reader-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: service-reader-role
  labels:
    app: APP_NAME
rules:
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "watch", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-reader-role-binding
  labels:
    app: APP_NAME
subjects:
  - kind: Group
    name: system:serviceaccounts
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: service-reader-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service                    # Type of kubernetes resource
metadata:
  name: APP_NAME-service   # Name of the resource
  namespace: test-APP_NAME
  labels:     # The labels that will be applied
    app: APP_NAME
  annotations:
    externalTrafficPolicy: "local"
spec:
  #type: NodePort                 # A port is opened on each node in your cluster via Kube proxy.
  # https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
  type: LoadBalancer             # Adds a load balancer (from the cloud provider)
  # k3s will deploy a daemonset listening on the given port on the host node
  # By default k3s have a builtin load balancer called "klipper" https://github.com/k3s-io/klipper-lb ok for one dev node.
  # It is possible to run multiple Services on the same node, as long as they use different ports.
  # in case you are using a 'real' k3s cluster with multiple nodes consider using metalLB instead
  externalTrafficPolicy: Local
  loadBalancerSourceRanges:
    - 192.168.0.0/16
  ports:                         # Take incoming HTTP requests on this port (exposed) and forward them to the targetPort of container
    - name: http
      port: 8000
      targetPort: 8000            # Should match the PORT env variable in deployment and containerPort that the Go application listens on
  selector:
    app: APP_NAME         # Map any pod with this label `app=APP_NAME` to this service
---
apiVersion: apps/v1
kind: Deployment                 # Type of Kubernetes resource
metadata:
  name: APP_NAME           # Name of the Kubernetes resource
  namespace: test-APP_NAME
  labels:
    app: APP_NAME
spec:
  replicas: 2                    # Number of pods to run at any given time
  selector:
    matchLabels:
      app: APP_NAME              # This deployment applies to any Pods matching the specified label
  template:                      # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels:                    # The labels that will be applied to all the pods in this deployment
        app: APP_NAME
    spec:                        # Spec for the container which will run in the Pod
      securityContext:           # https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        runAsUser: 1221           # using a non privileged user
        runAsGroup: 1221          # using the group 'gouser' created in Dockerfile
        fsGroup: 100             # by adding fsGroup field, all processes of the container are also part
                                 # of the supplementary group ID 100 (users).
        supplementalGroups:
          - 100
      containers:
      - name: APP_NAME
        image: GO_CONTAINER_REGISTRY_PREFIX/APP_NAME:APP_VERSION
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1221           # using the user 'gouser' created in Dockerfile
          runAsGroup: 1221          # using the group 'gouser' created in Dockerfile
          capabilities:
            drop:
              - 'ALL'
          readOnlyRootFilesystem: true
        ports:
          - containerPort: 8000  # Should match the PORT env variable above  that the Go application listens on
        resources:
          limits:            # resource limit imposed to the pod, the container cannot utilize more res than specified
            cpu: 1000m       # 1000 millicpu or millicores 1 or 100% of a CPU core of a running node
            memory: 128Mi
          requests:          # explicit request of the minimum amount of resources the pod need
            cpu: 100m        # 100 millicpu or millicores 0.1 or 10% of a CPU core of a running node
            memory: 32Mi
        livenessProbe:           # To check the health of the Pod
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 2
        readinessProbe:          # To check if the Pod is ready to serve traffic or not
          httpGet:
            path: /readiness
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 2
        env:
          - name: PORT
            value: "8000"
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: MY_POD_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
